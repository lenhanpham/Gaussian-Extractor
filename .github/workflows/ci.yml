name: CI/CD for Gaussian Extractor

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ make cmake clang-tidy

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          if [ $? -ne 0 ]; then
            echo "CMake configuration failed. Please check your CMakeLists.txt for errors."
            exit 1
          fi

      - name: Static Analysis
        run: clang-tidy -p build src/main.cpp src/core/gaussian_extractor.cpp src/core/job_scheduler.cpp

      - name: Build the project
        run: |
          cmake --build build
          if [ $? -ne 0 ]; then
            echo "Build failed. Please check the compilation errors above."
            exit 1
          fi

      - name: Prepare test data
        run: |
          cp tests/data/*.log .
          cp tests/extract-xyz/*.{log,LOG,Log,out,OUT} . || true
          cp tests/create-input/*.xyz .

      - name: Run Tests
        id: run_tests
        run: |
          if [ -f "./build/bin/gaussian_extractor.x" ]; then
            BINARY="./build/bin/gaussian_extractor.x"
          elif [ -f "./build/gaussian_extractor.x" ]; then
            BINARY="./build/gaussian_extractor.x"
          elif [ -f "./gaussian_extractor.x" ]; then
            BINARY="./gaussian_extractor.x"
          else
            echo "Test failed: gaussian_extractor.x binary not found."
            exit 1
          fi
          $BINARY -q -f csv
          if ! ls *.csv >/dev/null 2>&1; then
            echo "Test failed: No .csv file generated."
            exit 1
          fi
          csv_file=$(ls *.csv | head -n 1)
          if [ ! -s "$csv_file" ]; then
            echo "Test failed: $csv_file is empty."
            exit 1
          fi
          echo "Basic extraction tests passed."

      - name: Test Coordinate Extraction (xyz)
        run: echo "Skipping Coordinate Extraction test (placeholder)"

      - name: Test Create Input (ci)
        run: echo "Skipping Create Input test (placeholder)"

      - name: Test Parameter Template Generation
        run: echo "Skipping Parameter Template Generation test (placeholder)"

      - name: Test Parameter File Loading
        run: echo "Skipping Parameter File Loading test (placeholder)"

      - name: Process log and out files
        if: success() || steps.run_tests.conclusion == 'success'
        run: echo "Skipping log/out processing (placeholder)"

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: gaussian-results
          path: |
            *.results
            *.csv
            *.xyz
            *.gau
            *.params
            test_templates/
            gaussian-extractor_*_coord/
        if: always()

      - name: Display results
        run: echo "Skipping results display (placeholder)"
        if: always()

      - name: Cleanup test files
        run: |
          rm -f *.log *.out *.LOG *.Log *.OUT *.xyz *.gau *.params *.results *.csv
          rm -rf test_templates gaussian-extractor_*_coord
        if: always()

  build-and-deploy-docs:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser sphinx-markdown-builder breathe

      - name: Install Doxygen and LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen texlive-full

      - name: Generate Doxygen XML
        run: |
          doxygen Doxyfile
          if [ ! -d "docs/xml" ]; then
            echo "Doxygen XML generation failed: docs/xml/ directory not found."
            exit 1
          fi

      - name: Build Sphinx Documentation
        working-directory: docs
        run: |
          mkdir -p _static _templates
          make html
          make latexpdf
          sphinx-build -b markdown . _build/markdown
          if [ ! -f "_build/latex/GaussianExtractor.pdf" ]; then
            echo "PDF generation failed: GaussianExtractor.pdf not found."
            exit 1
          fi
          if [ ! -d "_build/html" ]; then
            echo "HTML generation failed: _build/html/ directory not found."
            exit 1
          fi
          if [ ! -d "_build/markdown" ]; then
            echo "Markdown generation failed: _build/markdown/ directory not found."
            exit 1
          fi

      - name: Upload Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/_build/html/
            docs/_build/latex/
            docs/_build/markdown/
        if: always()

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/_build/html/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
