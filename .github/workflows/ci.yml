name: CI/CD for Gaussian Extractor

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ make cmake clang-tidy

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          if [ $? -ne 0 ]; then
            echo "CMake configuration failed. Please check your CMakeLists.txt for errors."
            exit 1
          fi

      - name: Static Analysis
        run: clang-tidy -p build src/main.cpp src/core/gaussian_extractor.cpp src/core/job_scheduler.cpp

      - name: Build the project
        run: |
          cmake --build build
          if [ $? -ne 0 ]; then
            echo "Build failed. Please check the compilation errors above."
            exit 1
          fi

      - name: Prepare test data
        run: |
          cp tests/data/*.log .
          cp tests/extract-xyz/*.log tests/extract-xyz/*.LOG tests/extract-xyz/*.Log tests/extract-xyz/*.out tests/extract-xyz/*.OUT .
          cp tests/create-input/*.xyz .

      - name: Run Tests
        id: run_tests
        run: |
          # Try both possible binary locations
          if [ -f "./build/bin/gaussian_extractor.x" ]; then
            BINARY="./build/bin/gaussian_extractor.x"
          elif [ -f "./build/gaussian_extractor.x" ]; then
            BINARY="./build/gaussian_extractor.x"
          elif [ -f "./gaussian_extractor.x" ]; then
            BINARY="./gaussian_extractor.x"
          else
            echo "Test failed: gaussian_extractor.x binary not found."
            exit 1
          fi
          $BINARY -q -f csv
          if ! ls *.csv >/dev/null 2>&1; then
            echo "Test failed: No .csv file generated."
            exit 1
          fi
          # Find the first csv file and check if it's empty
          csv_file=$(ls *.csv | head -n 1)
          if [ ! -s "$csv_file" ]; then
            echo "Test failed: $csv_file is empty."
            exit 1
          fi
          echo "Basic extraction tests passed."

      - name: Test Coordinate Extraction (xyz)
        run: |
          echo "Testing coordinate extraction..."
          if ls *.log *.out >/dev/null 2>&1; then
            $BINARY xyz -q
            if ! ls *.xyz >/dev/null 2>&1; then
              echo "Coordinate extraction test failed: No .xyz files generated."
              exit 1
            fi
            # Check if any xyz file has content
            xyz_file=$(ls *.xyz | head -n 1)
            if [ ! -s "$xyz_file" ]; then
              echo "Coordinate extraction test failed: $xyz_file is empty."
              exit 1
            fi
            echo "Coordinate extraction tests passed."
          else
            echo "Skipping coordinate extraction test: No log/out files available."
          fi

      - name: Test Create Input (ci)
        run: |
          echo "Testing create input functionality..."
          if ls *.xyz >/dev/null 2>&1; then
            # Test basic ci command
            $BINARY ci --calc-type sp -q
            if ! ls *.gau >/dev/null 2>&1; then
              echo "Create input test failed: No .gau files generated."
              exit 1
            fi
            # Check if any gau file has content
            gau_file=$(ls *.gau | head -n 1)
            if [ ! -s "$gau_file" ]; then
              echo "Create input test failed: $gau_file is empty."
              exit 1
            fi
            echo "Create input tests passed."
          else
            echo "Skipping create input test: No .xyz files available."
          fi

      - name: Test Parameter Template Generation
        run: |
          echo "Testing parameter template generation..."
          $BINARY ci --generate-template opt_freq
          if [ ! -f "opt_freq.params" ]; then
            echo "Parameter template generation test failed: opt_freq.params not created."
            exit 1
          fi
          $BINARY ci --generate-all-templates ./test_templates
          if [ ! -d "./test_templates" ] || [ ! "$(ls -A ./test_templates 2>/dev/null)" ]; then
            echo "Parameter template generation test failed: test_templates directory empty or not created."
            exit 1
          fi
          echo "Parameter template generation tests passed."

      - name: Test Parameter File Loading
        run: |
          echo "Testing parameter file loading..."
          if [ -f "opt_freq.params" ] && ls *.xyz >/dev/null 2>&1; then
            $BINARY ci --param-file opt_freq.params --calc-type ts_freq -q
            if ! ls *.gau >/dev/null 2>&1; then
              echo "Parameter file loading test failed: No .gau files generated."
              exit 1
            fi
            echo "Parameter file loading tests passed."
          else
            echo "Skipping parameter file loading test: opt_freq.params or .xyz files not available."
          fi

      - name: Process log and out files
        if: success() || steps.run_tests.conclusion == 'success'
        run: |
          # Try both possible binary locations
          if [ -f "./build/bin/gaussian_extractor.x" ]; then
            BINARY="./build/bin/gaussian_extractor.x"
          elif [ -f "./build/gaussian_extractor.x" ]; then
            BINARY="./build/gaussian_extractor.x"
          elif [ -f "./gaussian_extractor.x" ]; then
            BINARY="./gaussian_extractor.x"
          else
            echo "Binary not found for log processing."
            exit 1
          fi

          # Run with log files (if any)
          find . -maxdepth 1 -name "*.log" -print0 | xargs -0 -r $BINARY

          # Run with out files (if any)
          find . -maxdepth 1 -name "*.out" -print0 | xargs -0 -r $BINARY -e out

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: gaussian-results
          path: |
            *.results
            *.csv
            *.xyz
            *.gau
            *.params
            test_templates/
            gaussian-extractor_*_coord/
        if: always()

      - name: Display results
        run: |
          echo "=== Test Results Summary ==="
          if ls *.results >/dev/null 2>&1; then
            echo "Results files:"
            ls -la *.results
            echo "Sample content from first results file:"
            head -20 *.results | head -1
          else
            echo "No results file generated."
          fi

          if ls *.csv >/dev/null 2>&1; then
            echo "CSV files:"
            ls -la *.csv
          fi

          if ls *.xyz >/dev/null 2>&1; then
            echo "XYZ files:"
            ls -la *.xyz
          fi

          if ls *.gau >/dev/null 2>&1; then
            echo "GAU files:"
            ls -la *.gau
          fi

          if ls *.params >/dev/null 2>&1; then
            echo "Parameter files:"
            ls -la *.params
          fi

          if [ -d "test_templates" ]; then
            echo "Template directory contents:"
            ls -la test_templates/
          fi

          # Check for coordinate directories
          coord_dirs=$(ls -d gaussian-extractor_*_coord 2>/dev/null || true)
          if [ -n "$coord_dirs" ]; then
            echo "Coordinate directories:"
            for dir in $coord_dirs; do
              echo "Contents of $dir:"
              ls -la "$dir/"
            done
          fi
        if: always()

      - name: Cleanup test files
        run: |
          rm -f *.log *.out *.LOG *.Log *.OUT *.xyz *.gau *.params *.results *.csv
          rm -rf test_templates gaussian-extractor_*_coord
        if: always()
